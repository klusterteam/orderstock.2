<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.kluster.orderstock_2.member.mapper.AdminMemberMapper">
	<!-- RESULTMAP 회원정보  -->
	<resultMap id="member" type="com.kluster.orderstock_2.member.domain.Amember">
		<result property="idx" column="idx"></result>
		<result property="memberName" column="member_name"></result>
		<result property="memberAddress" column="member_address"></result>
		<result property="memberPassword" column="member_password"></result>
		<result property="memberId" column="member_id"></result>
		<result property="memberEmail" column="member_email"></result>
		<result property="memberPhone" column="member_phone"></result>
		<result property="memberNickName" column="member_nickname"></result>
		<result property="memberCategoryNumber" column="member_category_number"></result>
		<result property="memberDeletedAt" column="member_deleted_at"></result>
		<association property="memberCategory" javaType="com.kluster.orderstock_2.member.domain.MemberCategory">
        	<id 	property="memberCategoryNumberIdx" 	column="member_category_number_idx"/>
        	<result property="memberCategoryName" 		column="member_category_name" />
        	
        </association>
	</resultMap>
	<resultMap id="memberCategory" type="com.kluster.orderstock_2.member.domain.MemberCategory">
		<result property="memberCategoryNumberIdx" 	column="member_category_number_idx"/>
       	<result property="memberCategoryName" 		column="member_category_name" />
	</resultMap>

	<!-- 로그인 -->
	<select id="getMemberList" resultMap="member">
		SELECT
			*
		from
			os_member as m
			inner join
			os_member_category as c
			on m.member_category_number = c.member_category_number_idx
		WHERE
		m.member_deleted_at is null
		
		order by idx desc
		LIMIT #{startIndex}, #{pageSize}
	</select>
	<select id="getMemberListCnt" resultType="int">
		SELECT			
		count(*) as totalListCnt		
		FROM			
		os_member
		where
		member_deleted_at is null
	</select>
<!-- 멤버 디테일 -->
<select id="getMemberDetail" resultMap="member" parameterType="int">
		SELECT
			*
			,c.member_category_number_idx
			,c.member_category_name
		from
			os_member as m
			inner join
			os_member_category as c
			on m.member_category_number = c.member_category_number_idx
		WHERE
			idx = #{idx}
		
	</select>
<!-- 회원 수정  -->
	<update id="memberModify" parameterType="com.kluster.orderstock_2.member.domain.Amember" >
		UPDATE os_member
			SET 
				  member_name =  #{memberName}
				, member_password =  #{memberPassword}
				, member_email=  #{memberEmail}
				, member_phone =  #{memberPhone}
				, member_address = #{memberAddress}
				, member_category_number = #{memberCategoryNumber}
			WHERE idx = #{idx}
	</update>
	<delete id="deleteMember" parameterType="int">
		UPDATE os_member
		set
			member_deleted_at = now()
		WHERE
			idx = #{idx};
	</delete>
	<select id="login_check" resultMap="member">
			select
			       member_id
			     , member_password
			from
				os_member
			where
				member_id = ${member_Id} and member_password = ${member_password}
	</select>

	<select id="readMember"  resultMap="member">
		select *
		from os_member
		where member_id=#{member_Id}
	</select>

	<select id="readMemberWithIDPW"  resultMap="member">
		select *
		from os_member
		where member_id=#{member_Id} and member_password=#{member_password}
	</select>
	<select id="getMemberSearchList" parameterType="com.kluster.orderstock_2.member.domain.Amember" resultMap="member">
		SELECT *
		from
			os_member as m
			inner join
			os_member_category as c
			on m.member_category_number = c.member_category_number_idx
		WHERE
			m.member_deleted_at is null
		<choose>
			<when test="type != null and type.equals('name')">
			and
			 m.member_name LIKE CONCAT ('%',#{keyword}, '%')
			</when>
			<when test="type != null and type.equals('email')">
			and
			 m.member_email LIKE CONCAT ('%',#{keyword}, '%')
			</when>
			<when test="type != null and type.equals('phone')">
			and
			 m.member_phone LIKE CONCAT ('%',#{keyword}, '%')
			</when>
		</choose>
	</select>
	<select id="getMemberCategory" resultMap="memberCategory">
		SELECT * FROM os_member_category
	</select>

	<select id="getTime" resultType="string">
		SELECT NOW()
	</select>

	<insert id="insertMember">
		INSERT INTO os_member as m (
			m.member_id,
		    m.member_password,
		    m.member_name,
		    m.member_email
		)values(
		    #{member_Id},
		    #{member_Password},
		    #{member_Name},
		    #{member_Email}
		)
	</insert>

	<select id="selectMember" resultType="com.kluster.orderstock_2.member.domain.Amember">
		SELECT
		    *
		FROM os_member
		where m.member_id = #{member_Id}
	</select>

	<select id="readWithPw" resultType="com.kluster.orderstock_2.member.domain.Amember">
		select * from os_member where member_id = #{member_Id} and member_password = #{member_Password}
	</select>

	<select id="loginCheck" resultType="String">
		SELECT member_name AS memberName FROM os_member
		where member_id = #{member_Id} AND member_password=#{member_Password}
	</select>

	<select id="viewMember" resultType="com.kluster.orderstock_2.login.domain.LoginVO">
		select
		    member_name as memberName,
		    member_id as memberId,
		    member_email as memberEmail
		from os_member
		where member_id = #{member_Id} and member_password = #{member_Password}
	</select>
	<!-- 로그인, 내정보조회 -->
	<select id="getMemberInfoById" parameterType="String" resultType="com.kluster.orderstock_2.member.domain.Amember">
		SELECT
			member_id
			 , member_pw
			 , member_name
			 , member_email
		FROM
			os_member
		WHERE
			member_id = #{member_Id};
	</select>

	<!-- 로그인내역코드 자동증가 -->
	<!--<select id="getLoginCode" resultType="String">
		SELECT
			CASE
				WHEN COUNT(1) = 0 THEN 'login_001'
				ELSE
					CONCAT('login_', LPAD(MAX(CAST(SUBSTRING(login_num,7,3)AS DECIMAL)+1),3,0))
				END AS loginNum
		FROM
			tb_member_login;
	</select>-->
</mapper>